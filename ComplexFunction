package Ex1;

import java.util.ArrayList;

public class ComplexFunction implements complex_function {

	private Operation op;
	private function left, right;

	public ComplexFunction(Operation op, function left, function right) {
		this.op = op;
		this.left = left;
		this.right = right;
	}

	public function initFromString(String s) {
		if (s.contains("Plus")) {
		}
	}

	public double f(double x) {
		return x;
	}

	/**
	 * return a String representing this complex function
	 */
//	public String toString() {
//		String ans = "";
//		ans += cf.get(0);
//		for (int i = 1; i < this.cf.size(); i++) {
//			if(cf.get(i).toString().charAt(0) )
//			ans += cf.get(i);
//		}
//		return ans;
//	}

	public function copy() {
		return null;

	}

	public boolean equals(Object obj) {
		return false;
	}

	/**
	 * Add to this complex_function the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be added to this complex_function.
	 */
	public void plus(function f1) {

	}

	/**
	 * Multiply this complex_function with the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be multiply be this
	 *           complex_function.
	 */
	public void mul(function f1) {

	}

	/**
	 * Divides this complex_function with the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be divid this complex_function.
	 */
	public void div(function f1) {

	}

	/**
	 * Computes the maximum over this complex_function and the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be compared with this
	 *           complex_function - to compute the maximum.
	 */
	public void max(function f1) {

	}

	/**
	 * Computes the minimum over this complex_function and the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be compared with this
	 *           complex_function - to compute the minimum.
	 */
	public void min(function f1) {

	}

	/**
	 * This method wrap the f1 complex_function with this function: this.f(f1(x))
	 * 
	 * @param f1 complex function
	 */
	public void comp(function f1) {

	}

	/**
	 * returns the left side of the complex function - this side should always
	 * exists (should NOT be null).
	 * 
	 * @return a function representing the left side of this complex funcation
	 */
	public function left() {
		return null;
	}

	/**
	 * returns the right side of the complex function - this side might not exists
	 * (aka equals null).
	 * 
	 * @return a function representing the left side of this complex funcation
	 */
	public function right() {
		return null;
	}

	/**
	 * The complex_function oparation: plus, mul, div, max, min, comp
	 * 
	 * @return
	 */
	public Operation getOp() {
		return null;
	}
}
